highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyCrosshair(direction = "vertical") %>%
dyOptions(#colors = c("#266DD3","23F0C7"),
axisLineColor = "navy", gridLineColor = "grey")
plot_array2 <- gen_array2(unr, ets_mod1, arima_mod1)
plot_array2 <- cbind(unr, ets_mod1, arima_mod1)
plot_array2 <- gen_array2(ets_mod1, arima_mod1)
plot_array2 <- cbind(unr, ets_mod1, arima_mod1)
cbind(unr, forecast1, forecast2)
gen_array2 <- function(model1, model2){
forecast_obj1 <- forecast(model1)
forecast_obj2 <- forecast(model2)
actuals <- forecast_obj1$x
forecast1 <- forecast_obj1$mean
forecast2 <- forecast_obj2$mean
cbind(unr, forecast1, forecast2)
}
fr1 <- forecast(ets_mod1)
fr2 <- forecast(arima_mod1)
library(zoo)
plot_array2 <- data.frame(cbind(unr, fr1$mean, fr2$mean))
plot_array2$date <- c(as.yearmon(time(unr)), rep(NA, nrow(plot_array2) - length(unr)))
filt3 <- which(rowSums(is.na(plot_array2))==0)
forecast_compare <- plot_array2[filt3,]
plot_array2 <- gen_array2(ets_mod1, arima_mod1)
plot_array2 <- cbind(unr, ets_mod1, arima_mod1)
plot_array2 <- gen_array2(ets_mod1, arima_mod1)
#plot_array2 <- cbind(unr, ets_mod1, arima_mod1)
dygraph(plot_array2, main = 'Model forecasts') %>%
dyRangeSelector() %>%
dyRangeSelector(height = 40,
dateWindow = c("2015-01-01", "2019-4-01")) %>%
#dySeries(name = "actuals", label = "actual") %>%
#dySeries(c("lower","point_forecast","upper"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyCrosshair(direction = "vertical") %>%
dyOptions(#colors = c("#266DD3","23F0C7"),
axisLineColor = "navy", gridLineColor = "grey")
?dyOptions
#plot_array2 <- cbind(unr, ets_mod1, arima_mod1)
dygraph(plot_array2, main = 'Model forecasts') %>%
dyRangeSelector() %>%
dyRangeSelector(height = 40,
dateWindow = c("2015-01-01", "2019-4-01")) %>%
#dySeries(name = "actuals", label = "actual") %>%
#dySeries(c("lower","point_forecast","upper"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyCrosshair(direction = "vertical") %>%
dyOptions(drawPoints=T,
axisLineColor = "navy", gridLineColor = "grey")
#plot_array2 <- cbind(unr, ets_mod1, arima_mod1)
dygraph(plot_array2, main = 'Model forecasts') %>%
dyRangeSelector() %>%
dyRangeSelector(height = 40,
dateWindow = c("2015-01-01", "2019-4-01")) %>%
#dySeries(name = "actuals", label = "actual") %>%
#dySeries(c("lower","point_forecast","upper"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyCrosshair(direction = "vertical") %>%
dyOptions(drawPoints=T, pointSize=3,
axisLineColor = "navy", gridLineColor = "grey")
head(unr, -3)
head(head(unr, -3))
head(head(unr, -2))
tail(head(unr, -3))
tail(head(unr, -2))
ets_mod2 <- forecast::ets(head(unr, -2))
ets_mod2
ets_mod2$x
ets_mod2$x %>% tail
ets_mod3 <- forecast::ets(heat(unr, -1))
head(unr, -1)
head(unr, -1) %>% tail
head(unr, -2) %>% tail
# rolling ets model
ets_mod2 <- forecast::ets(head(unr, -2))
ets_mod3 <- forecast::ets(head(unr, -1))
library(forecast)
library(fredr)
library(zoo)
library(tidyverse)
library(dygraphs)
fredr_key("0e510a57a0086df706ac9c8fb852b706")
unr <- fredr_series(series_id='UNRATE')
unr2 <- data.frame(unemp=as.matrix(unr),
date=as.yearmon(time(unr)))
unr2$diff_unemp <- c(NA, diff(unr2$unemp, 1))
dygraph(unr, main='Unemployment Rate') %>%
dyRangeSelector() %>%
dySeries(label='Unemployment Rate', color='black') %>%
dyHighlight(highlightCircleSize=4,hideOnMouseOut=F) %>%
dyCrosshair(direction = "vertical") %>%
dyRangeSelector(dateWindow = c("2000-01-01", '2017-10-01'))
dygraph(diff(unr, 1), main='Unemployment Rate, first difference') %>%
dyRangeSelector() %>%
dySeries(label='Unemployment Rate', color='black') %>%
dyHighlight(highlightCircleSize=4,hideOnMouseOut=F) %>%
dyCrosshair(direction = "vertical") %>%
dyRangeSelector(dateWindow = c("2000-01-01", '2017-10-01'))
unr2 <- head(unr, -3)
ets_mod1 <- forecast::ets(unr2)
arima_mod1 <- forecast::auto.arima(unr2)
gen_array2 <- function(model1, model2){
forecast_obj1 <- forecast(model1)
forecast_obj2 <- forecast(model2)
actuals <- forecast_obj1$x
forecast1 <- forecast_obj1$mean
forecast2 <- forecast_obj2$mean
cbind(unr, forecast1, forecast2)
}
# rolling ets model
ets_mod2 <- forecast::ets(head(unr, -2))
ets_mod3 <- forecast::ets(head(unr, -1))
fr1 <- forecast(ets_mod1)
fr2 <- forecast(arima_mod1)
library(zoo)
plot_array2 <- data.frame(cbind(unr, fr1$mean, fr2$mean))
plot_array2$date <- c(as.yearmon(time(unr)), rep(NA, nrow(plot_array2) - length(unr)))
filt3 <- which(rowSums(is.na(plot_array2))==0)
forecast_compare <- plot_array2[filt3,]
plot_array2 <- gen_array2(ets_mod1, arima_mod1)
#plot_array2 <- cbind(unr, ets_mod1, arima_mod1)
dygraph(plot_array2, main = 'Model forecasts') %>%
dyRangeSelector() %>%
dyRangeSelector(height = 40,
dateWindow = c("2015-01-01", "2018-8-01")) %>%
#dySeries(name = "actuals", label = "actual") %>%
#dySeries(c("lower","point_forecast","upper"), label = "Predicted") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesOpts = list(strokeWidth = 2)) %>%
dyCrosshair(direction = "vertical") %>%
dyOptions(drawPoints=T, pointSize=3,
axisLineColor = "navy", gridLineColor = "grey")
forecast_compare <- forecast_compare %>%
mutate(mod1_err = unr - fr1.mean,
mod2_err = unr - fr2.mean)
forecast_compare %>%
select(date, mod1_err,mod2_err) %>%
reshape2::melt(id.vars = 'date') %>%
ggplot(aes(x=as.character(date), y=abs(value), fill=variable)) +
geom_bar(position = 'dodge', stat='identity')
fr1
?ets
ets_fr1 <- forecast(ets_mod1)
ets_fr2 <- forecast(ets_mod2)
ets_fr3 <- forecast(ets_mod3)
rolling_ets_fr <- cbind(unr, ets_fr1$mean, ets_fr2$mean, ets_fr3$mean)
View(rolling_ets_fr)
glimpse(rolling_ets_fr)
rolling_ets_fr$date <- c(as.yearmon(time(unr)), rep(NA, nrow(plot_array2) - length(unr)))
glimpse(rolling_ets_fr)
ets_fr1 <- forecast(ets_mod1)
ets_fr2 <- forecast(ets_mod2)
ets_fr3 <- forecast(ets_mod3)
rolling_ets_fr <- data.frame(cbind(unr, ets_fr1$mean, ets_fr2$mean, ets_fr3$mean))
rolling_ets_fr$date <- c(as.yearmon(time(unr)), rep(NA, nrow(plot_array2) - length(unr)))
rolling_ets_fr$date <- c(as.yearmon(time(unr)), rep(NA, nrow(rolling_ets_fr) - length(unr)))
glimpse(rolling_ets_fr)
View(rolling_ets_fr)
rolling_ets_fr %>% filter(date %in% c('Sep 2017','Oct 2017','Nov 2017'))
rolling_ets_fr %>% filter(date %in% as.yearmon(c('Sep 2017','Oct 2017','Nov 2017')))
rolling_ets_fr <- rolling_ets_fr %>%
filter(date %in% as.yearmon(c('Sep 2017','Oct 2017','Nov 2017')))
is.na(rolling_ets_fr)
rolling_ets_fr <- reshape2::melt(rolling_ets_fr,
id.vars = 'date')
rolling_ets_fr
ets_fr1 <- forecast(ets_mod1)
ets_fr2 <- forecast(ets_mod2)
ets_fr3 <- forecast(ets_mod3)
rolling_ets_fr <- data.frame(cbind(unr, ets_fr1$mean, ets_fr2$mean, ets_fr3$mean))
rolling_ets_fr$date <- c(as.yearmon(time(unr)), rep(NA, nrow(rolling_ets_fr) - length(unr)))
rolling_ets_fr
ets_fr1 <- forecast(ets_mod1)
ets_fr2 <- forecast(ets_mod2)
ets_fr3 <- forecast(ets_mod3)
rolling_ets_fr <- data.frame(cbind(unr, ets_fr1$mean, ets_fr2$mean, ets_fr3$mean))
rolling_ets_fr$date <- c(as.yearmon(time(unr)), rep(NA, nrow(rolling_ets_fr) - length(unr)))
rolling_ets_fr <- rolling_ets_fr %>%
filter(date %in% as.yearmon(c('Sep 2017','Oct 2017','Nov 2017')))
rolling_ets_fr
map_dbl(rolling_ets_fr, function(x) max(which(is.na(x))))
rolling_ets_fr2 <- reshape2::melt(rolling_ets_fr,
id.vars = 'date')
dygraph(ets_forecasts1[[2]], main='test') %>%
dyRangeSelector(height=20, dateWindow = c('2016-06-01', '2018-12-01')) %>%
dyOptions(drawPoints=T, pointSize=3) %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.3)
?dygraph
library(forecast)
library(fredr)
library(zoo)
library(tidyverse)
library(reshape2)
library(dygraphs)
library(lubridate)
gen_forecast_array <- function(model_list){
forecast_list <-
purrr::map(model_list, function(x) forecast(x))
actuals <- forecast_list[[1]]$x
point_forecasts <-
purrr::map(forecast_list, function(x) x$mean)
new_colnames <- c(names(model_list), 'actuals')
point_forecasts[[length(point_forecasts)+1]] <- actuals
names(point_forecasts)  <- new_colnames
forecast_array <- Reduce(cbind, point_forecasts)
dimnames(forecast_array) <- list(NULL, new_colnames)
forecast_wide <- data.frame(forecast_array)
forecast_date <- min(as.yearmon(time(forecast_list[[1]]$x)))
forecast_date <- forecast_date + (1/12) * (1:nrow(forecast_wide))
forecast_wide$date <- forecast_date
#put holdout actuals back
forecast_wide$actuals[is.na(forecast_wide$actuals)][1:6] <- tail(unr,6)
forecast_long <- forecast_wide %>%
reshape2::melt(id.vars=c('date'))
names(forecast_long) <- c('date','model','value')
list(forecast_wide, forecast_long, forecast_array)
}
api_key <- "0e510a57a0086df706ac9c8fb852b706"
fredr_key(api_key)
unr <- fredr_series(series_id='UNRATE')
head(unr)
tail(unr)
unr2 <- data.frame(unemp=as.matrix(unr),
date=as.yearmon(time(unr)))
unr2$diff_unemp <- c(NA, diff(unr2$unemp, 1))
pay <- fredr_series(series_id="PAYEMS")
gdp <- fredr_series(series_id='A191RL1Q225SBEA')
cpi <- fredr_series(series_id="CPIAUCSL")
gdp2 <- data.frame(gdp=as.matrix(gdp),
date=as.yearmon(time(gdp)))
pay2 <- data.frame(payemp=as.matrix(pay),
date=as.yearmon(time(pay)))
cpi2 <- data.frame(cpi=as.matrix(cpi),
date=as.yearmon(time(cpi)))
master <- left_join(unr2, gdp2)
master <- left_join(master, pay2)
master <- left_join(master, cpi2)
?dygraph
dygraph(unr)
dygraph(unr, main=paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)) %>% dyRangeSelector() %>%
dygraph(unr, main=paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)) %>% dyRangeSelector() %>%
dygraph(unr, main=paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)) %>% dyRangeSelector() %>%
min_date <- min(master$date)
max_date <- max(master$date)
master %>%
ggplot(aes(x=date, y=unemp)) + geom_line() +
ggtitle(paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)) + ylab('Unemployment %')
dygraph(unr, main=paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)) %>% dyRangeSelector() %>%
paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)
title <- paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)
dygraph(unr, main=title %>% dyRangeSelector()
title <- paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)
dygraph(unr, main=title) %>% dyRangeSelector()
title
dygraph(unr, main=title) %>% dyRangeSelector() %>%
dyOptions(drawPoints=T, pointSize=2)
title <- paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)
dygraph(unr, main=title) %>% dyRangeSelector() %>%
dyHighlight(highlightCircleSize = 4)
101.9-2.
101.9-2.5
library(forecast)
library(fredr)
library(zoo)
library(tidyverse)
library(reshape2)
library(dygraphs)
library(lubridate)
gen_forecast_array <- function(model_list){
forecast_list <-
purrr::map(model_list, function(x) forecast(x))
actuals <- forecast_list[[1]]$x
point_forecasts <-
purrr::map(forecast_list, function(x) x$mean)
new_colnames <- c(names(model_list), 'actuals')
point_forecasts[[length(point_forecasts)+1]] <- actuals
names(point_forecasts)  <- new_colnames
forecast_array <- Reduce(cbind, point_forecasts)
dimnames(forecast_array) <- list(NULL, new_colnames)
forecast_wide <- data.frame(forecast_array)
forecast_date <- min(as.yearmon(time(forecast_list[[1]]$x)))
forecast_date <- forecast_date + (1/12) * (1:nrow(forecast_wide))
forecast_wide$date <- forecast_date
#put holdout actuals back
forecast_wide$actuals[is.na(forecast_wide$actuals)][1:6] <- tail(unr,6)
forecast_long <- forecast_wide %>%
reshape2::melt(id.vars=c('date'))
names(forecast_long) <- c('date','model','value')
list(forecast_wide, forecast_long, forecast_array)
}
api_key <- "0e510a57a0086df706ac9c8fb852b706"
fredr_key(api_key)
unr <- fredr_series(series_id='UNRATE')
head(unr)
tail(unr)
unr2 <- data.frame(unemp=as.matrix(unr),
date=as.yearmon(time(unr)))
unr2$diff_unemp <- c(NA, diff(unr2$unemp, 1))
pay <- fredr_series(series_id="PAYEMS")
gdp <- fredr_series(series_id='A191RL1Q225SBEA')
cpi <- fredr_series(series_id="CPIAUCSL")
gdp2 <- data.frame(gdp=as.matrix(gdp),
date=as.yearmon(time(gdp)))
pay2 <- data.frame(payemp=as.matrix(pay),
date=as.yearmon(time(pay)))
cpi2 <- data.frame(cpi=as.matrix(cpi),
date=as.yearmon(time(cpi)))
master <- left_join(unr2, gdp2)
master <- left_join(master, pay2)
master <- left_join(master, cpi2)
min_date <- min(master$date)
max_date <- max(master$date)
master %>%
ggplot(aes(x=date, y=unemp)) + geom_line() +
ggtitle(paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)) + ylab('Unemployment %')
title <- paste0('US monthly unemployment rate, ',
min_date, ' - ', max_date)
dygraph(unr, main=title) %>% dyRangeSelector() %>%
dyHighlight(highlightCircleSize = 4)
plot(decompose(unr))
smoothing_df <- data_frame(
'Trend Component' = c('N (None)','A (Additive)', 'Ad (Additive damped)', 'M (Multiplicative)', 'Md (Multiplicative damped)'),
'N (None)' = c('N,N','A,N','Ad,N','M,N','Md,N'), 'A (Additive)' = c('N,A','A,A','Ad,A','M,A','Md,A'),
'M (Multiplicative)' = c('N,M','A,M','Ad,M','M,M','Md,M'))
unr2 <- head(unr, -6)
tail(unr)
tail(unr2)
# forecast::ets(series, model='ETS')
# A = additive, M = multiplicative, N = none, Z = automatic
model_type <- c('ANN','AAA','MMM')
ets_models <- purrr::map(model_type, function(x) forecast::ets(unr2, x))
names(ets_models) <- model_type
summary(ets_models)
ets_forecasts1 <- gen_forecast_array(ets_models)
library(scales)
shapes <- c(20,2,7,10)
y_breaks <-  4 + 1:5 / 5
p1 <- ets_forecasts1[[2]] %>%
filter(date > '2016-01-01' &
date < '2018-04-01') %>%
mutate(model = factor(model, levels=c('actuals',model_type)),
actual = ifelse(model=='actuals', 'Actual','Forecast')) %>%
ggplot(aes(x=as.Date(date), y=value, colour=actual, group=model)) +
geom_line() + geom_point(aes(shape=model), size = 2.5) +
ggtitle("unemployment rate forecasts - 6 months out") +
theme(
legend.position = 'bottom',
legend.title=element_blank()
) +
labs(x='Month', y='Unemployment rate %') +
scale_x_date(labels = date_format('%b-%Y')) +
scale_y_continuous(breaks=y_breaks) +
scale_shape_manual(values=shapes)
p1
model_type
holdout_size <- 6
truncated_series <- purrr::map(1:holdout_size, function(x) head(unr, -x))
ets_models2 <- vector('list', length=length(truncated_series)*3)
model_names <- character()
for(x in 1:length(model_type)){
for(y in 1:length(truncated_series)){
model <- ets(truncated_series[[y]], model_type[x])
index <- (length(truncated_series) * (x-1) )+ y
ets_models2[[index]] <- model
model_date <- as.yearmon(time(tail(head(unr, -y), 1)))
model_names <- c(model_names,
paste0(model_type[x],'-', model_date))
}
}
names(ets_models2) <- model_names
gen_forecast_array2 <- function(model_list){
forecast_list <-
purrr::map(model_list, function(x) forecast(x))
actuals <- forecast_list[[1]]$x
point_forecasts <-
purrr::map(forecast_list, function(x) x$mean)
new_colnames <- c(names(model_list), 'actuals')
point_forecasts[[length(point_forecasts)+1]] <- unr
names(point_forecasts)  <- new_colnames
forecast_array <- Reduce(cbind, point_forecasts)
dimnames(forecast_array) <- list(NULL, new_colnames)
forecast_wide <- data.frame(forecast_array)
forecast_date <- as.yearmon(time(unr))
forecast_date <- c(forecast_date,
max(forecast_date ) +
(1/12) * (1:(nrow(forecast_wide)-length(unr))))
forecast_wide$date <- forecast_date
#put holdout actuals back
#forecast_wide$actuals[is.na(forecast_wide$actuals)][1:6] <- tail(unr,6)
forecast_long <- forecast_wide %>%
reshape2::melt(id.vars=c('date'))
names(forecast_long) <- c('date','model','value')
list(forecast_wide, forecast_long, forecast_array)
}
ets_forecasts2 <- gen_forecast_array2(ets_models2)
graph_df1 <- ets_forecasts2[[2]] %>%
filter(date > '2016-01-01' &
date < '2018-01-01') %>%
mutate(model2 = gsub('\\..*', '', model),
actual = ifelse(model=='actuals', 'Actual','Forecast'))
graph_df1 <- graph_df1 %>% filter((model2 %in% model_type &
!is.na(value) |
model2 == 'actuals'))
graph_df1$model_date <- gsub("^.*?\\.","", graph_df1$model)
graph_df1$model_date <- as.yearmon(gsub('[.]', ' ', graph_df1$model_date))
graph_df1 %>%
filter((model2 %in% model_type &
month(graph_df1$date) - month(graph_df1$model_date) == 1) |
model2=='actuals') %>%
ggplot(aes(x=as.Date(date), y=value, colour=actual, group=model2)) +
geom_line() + geom_point(aes(shape=model2), size = 2.5) +
ggtitle("unemployment rate forecasts - 1 month out") +
theme(
legend.position = 'bottom',
legend.title=element_blank()
) +
labs(x='Month', y='Unemployment rate %') +
scale_x_date(labels = date_format('%b-%Y')) +
scale_y_continuous(breaks=y_breaks)
filter_dates <- max(ets_forecasts1[[1]]$date[!is.na(ets_forecasts1[[1]]$actuals)])
filter_dates <- rev(filter_dates - 1/12 * 0:5)
forecast_error <- ets_forecasts1[[1]] %>% filter(date %in% filter_dates)
forecast_error$actuals <- tail(unr,6)
forecast_error2 <- reshape2::melt(forecast_error, id.vars=c('date','actuals'))
forecast_error2$error <- as.numeric(forecast_error2$actuals) -
as.numeric(forecast_error2$value)
forecast_error2 %>%
ggplot(aes(x=factor(months(date,abbreviate=T),
levels=c('Jul','Aug','Sep','Oct','Nov','Dec')), y=abs(error), fill=variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Month', y='Absolute error', title='forecasting error by model type - 6 months out') +
scale_fill_discrete(labels=c('Constant','Additive', 'Multiplicative'), name='Model') +
theme(
legend.position = 'top',
legend.title=element_blank(),
axis.text.x = element_text(angle=45, hjust=1)
) + facet_grid(.~as.factor(variable))
filter_dates <- as.yearmon('June 2017')
filter_dates <- rev(filter_dates + 1/12 * 0:5)
forecast_error3 <- graph_df1 %>% filter(date %in% filter_dates)
forecast_error3 <- forecast_error3 %>%
mutate(month_num = month(date) - month(model_date)) %>%
filter(month_num %in% c(NA,1))
forecast2 <- forecast_error3 %>% spread(model2, value)  %>% select(-model, -model_date,
-month_num)
actual_df <- forecast2 %>% filter(!is.na(actuals)) %>%
select(date, actuals)
forecast2 <- forecast2 %>% select(-actual, -actuals)
#forecast_error$actuals <- tail(unr,6)
f1 <- forecast2 %>% filter(!is.na(AAA)) %>% select(date, AAA)
f2 <- forecast2 %>% filter(!is.na(ANN)) %>% select(date, ANN)
f3 <- forecast2 %>% filter(!is.na(MMM)) %>% select(date, MMM)
final <- left_join(actual_df, f1)
final <- left_join(final, f2)
final <- left_join(final, f3)
final <- final %>% melt(id.vars =c('date','actuals')) %>%
mutate(error = actuals - value)
final$variable <- factor(final$variable, levels = model_type)
final %>%
ggplot(aes(x=factor(months(date,abbreviate=T),
levels=c('Jun','Jul', 'Aug','Sep','Oct','Nov')), y=abs(error), fill=variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Month', y='Absolute error', title='forecasting error by model type - 1 month out') +
scale_fill_discrete(labels=c('Constant','Additive', 'Multiplicative'), name='Model') +
theme(
legend.position = 'top',
legend.title=element_blank(),
axis.text.x = element_text(angle=45, hjust=1)
) + facet_grid(.~as.factor(variable))
mon1 <- final %>% select(variable, 'error_1month'=error) %>%
mutate(error_1month = abs(error_1month)) %>%
group_by(variable) %>%
summarise_all(funs(mean))
mon6 <- forecast_error2 %>% select(variable, 'error_6month'=error) %>%
mutate(error_6month = abs(error_6month)) %>%
group_by(variable) %>%
summarise_all(funs(mean))
final2 <- left_join(mon1, mon6) %>%
melt(id.vars = 'variable')
names(final2) <- c('model', 'forecast_window' ,'error')
final2 %>%
ggplot(aes(x=model, y=error, fill=forecast_window)) +
geom_bar(stat='identity', position='dodge') +
labs(x='Month', y='Absolute error', title='forecasting error by forecast scenario') +
theme(
legend.position = 'top',
legend.title=element_blank(),
axis.text.x = element_text(angle=45, hjust=1)
)
summary(ets_models)
summary(ets_models2)
View(ets_models[[1]])
View(ets_forecasts1[[1]])
